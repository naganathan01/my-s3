trigger:
  - main

pool:
  name: Default

steps:
  - task: PowerShell@2
    displayName: 'Print Build Variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Running with variables:"
        
        # Function to safely get variable value
        function Get-VarValue {
            param($varName)
            $value = [Environment]::GetEnvironmentVariable($varName)
            if ([string]::IsNullOrEmpty($value)) {
                return "(not set)"
            }
            return $value
        }
        
        # Print all variables with error handling
        $variables = @(
            'APPLICATION',
            'DEPLOY_VERSION',
            'ENVIRONMENT',
            'TF_VAR_CREATE_BLACK',
            'TF_VAR_WEB_AMI_BLACK',
            'TF_VAR_CREATE_RED',
            'TF_VAR_WEB_AMI_RED',
            'TF_VAR_ELB_TARGET'
        )
        
        foreach ($var in $variables) {
            $value = Get-VarValue $var
            Write-Host "$var: $value"
        }

  - task: PowerShell@2
    displayName: 'Process Variables'
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        # Function to get variable value with default
        function Get-VarValue {
            param(
                $varName,
                $default = "(not set)"
            )
            $value = [Environment]::GetEnvironmentVariable($varName)
            if ([string]::IsNullOrEmpty($value)) {
                return $default
            }
            return $value
        }
        
        # Process variables safely
        $appName = Get-VarValue 'APPLICATION' 'DefaultApp'
        $version = Get-VarValue 'DEPLOY_VERSION' '1.0.0'
        $env = Get-VarValue 'ENVIRONMENT' 'Development'
        $createBlack = Get-VarValue 'TF_VAR_CREATE_BLACK' 'No'
        
        Write-Host "Processing variables:"
        Write-Host "App Name: $appName"
        Write-Host "Version: $version"
        Write-Host "Environment: $env"
        Write-Host "Create Black: $createBlack"
        
        # Example of conditional logic
        if ($createBlack -eq "Yes") {
            Write-Host "Black deployment is enabled"
        } else {
            Write-Host "Black deployment is not enabled"
        }