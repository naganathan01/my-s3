trigger:
  - main

pool:
  name: Default

steps:
  - task: PowerShell@2
    displayName: 'Print Build Variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Running with variables:"
        
        # Function to safely get variable value
        function Get-VarValue {
            param($varName)
            try {
                $value = (Get-Item env:$varName).Value
                if ([string]::IsNullOrEmpty($value)) {
                    return "(not set)"
                }
                return $value
            }
            catch {
                return "(not set)"
            }
        }
        
        # Print each variable separately to avoid formatting issues
        Write-Host "APPLICATION:" (Get-VarValue 'APPLICATION')
        Write-Host "DEPLOY_VERSION:" (Get-VarValue 'DEPLOY_VERSION')
        Write-Host "ENVIRONMENT:" (Get-VarValue 'ENVIRONMENT')
        Write-Host "TF_VAR_CREATE_BLACK:" (Get-VarValue 'TF_VAR_CREATE_BLACK')
        Write-Host "TF_VAR_WEB_AMI_BLACK:" (Get-VarValue 'TF_VAR_WEB_AMI_BLACK')
        Write-Host "TF_VAR_CREATE_RED:" (Get-VarValue 'TF_VAR_CREATE_RED')
        Write-Host "TF_VAR_WEB_AMI_RED:" (Get-VarValue 'TF_VAR_WEB_AMI_RED')
        Write-Host "TF_VAR_ELB_TARGET:" (Get-VarValue 'TF_VAR_ELB_TARGET')

  - task: PowerShell@2
    displayName: 'Process Variables'
    inputs:
      targetType: 'inline'
      script: |
        # Process variables with safe retrieval
        $appName = (Get-Item env:APPLICATION -ErrorAction SilentlyContinue).Value
        $version = (Get-Item env:DEPLOY_VERSION -ErrorAction SilentlyContinue).Value
        $env = (Get-Item env:ENVIRONMENT -ErrorAction SilentlyContinue).Value
        $createBlack = (Get-Item env:TF_VAR_CREATE_BLACK -ErrorAction SilentlyContinue).Value
        
        Write-Host "Processing variables:"
        Write-Host "App Name:" $appName
        Write-Host "Version:" $version
        Write-Host "Environment:" $env
        Write-Host "Create Black:" $createBlack
        
        # Example of conditional logic with safe checking
        if ($createBlack -eq "Yes") {
            Write-Host "Black deployment is enabled"
        } else {
            Write-Host "Black deployment is not enabled"
        }