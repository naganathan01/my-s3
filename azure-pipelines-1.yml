trigger:
  - main

# Don't define the variables section since we're using pipeline variables
# variables:
#   - name: APPLICATION
#     value: $[variables.APPLICATION]

pool:
  name: Default

steps:
  - task: PowerShell@2
    displayName: 'Print Build Variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Running with variables:"
        Write-Host "APPLICATION: $(APPLICATION)"
        Write-Host "DEPLOY_VERSION: $(DEPLOY_VERSION)"
        Write-Host "ENVIRONMENT: $(ENVIRONMENT)"
        Write-Host "TF_VAR_CREATE_BLACK: $(TF_VAR_CREATE_BLACK)"
        Write-Host "TF_VAR_WEB_AMI_BLACK: $(TF_VAR_WEB_AMI_BLACK)"
        Write-Host "TF_VAR_CREATE_RED: $(TF_VAR_CREATE_RED)"
        Write-Host "TF_VAR_WEB_AMI_RED: $(TF_VAR_WEB_AMI_RED)"
        Write-Host "TF_VAR_ELB_TARGET: $(TF_VAR_ELB_TARGET)"

  - task: PowerShell@2
    displayName: 'Process Variables'
    inputs:
      targetType: 'inline'
      script: |
        # Using the variables directly
        $appName = "$(APPLICATION)"
        $version = "$(DEPLOY_VERSION)"
        $env = "$(ENVIRONMENT)"
        $createBlack = "$(TF_VAR_CREATE_BLACK)"
        
        Write-Host "Processing variables:"
        Write-Host "App Name: $appName"
        Write-Host "Version: $version"
        Write-Host "Environment: $env"
        Write-Host "Create Black: $createBlack"
        
        # Example of conditional logic
        if ($createBlack -eq "Yes") {
            Write-Host "Black deployment is enabled"
        } else {
            Write-Host "Black deployment is not enabled"
        }